!function(){function t(t){let e=t;for(;e=e.parentNode;){if(11===e.nodeType)return e.host;if("BODY"===e.tagName)return null}return null}const e="disabled";const s="selector",n="observe";!function(t){let e=t.is;customElements.get(e)?console.warn("Already registered "+e):customElements.define(e,t)}(class extends(function(e){const s=["animationstart","MSAnimationStart","webkitAnimationStart"];return class extends e{addCSSListener(e,n,i){if(this._boundInsertListener)return;const r=`\n            @keyframes ${e} {\n                from {\n                    opacity: 0.99;\n                }\n                to {\n                    opacity: 1;\n                }\n            }\n    \n            ${n}{\n                animation-duration: 0.001s;\n                animation-name: ${e};\n            }\n            `,a=document.createElement("style");a.innerHTML=r;const o=t(this);null!==o?o.shadowRoot.appendChild(a):document.body.appendChild(a),this._boundInsertListener=i.bind(this);const c=o?o.shadowRoot:document;s.forEach(t=>{c.addEventListener(t,this._boundInsertListener,!1)})}disconnectedCallback(){if(this._boundInsertListener){const e=t(this),n=e?e.shadowRoot:document;s.forEach(t=>{n.removeEventListener(t,this._boundInsertListener)})}void 0!==super.disconnectedCallback&&super.disconnectedCallback()}}}(function(t){return class extends t{constructor(){super(...arguments),this._evCount={}}static get observedAttributes(){return[e]}get disabled(){return this._disabled}set disabled(t){this.attr(e,t,"")}attr(t,e,s){this[(e?"set":"remove")+"Attribute"](t,s||e)}to$(t){const e=t%2;return(t-e)/2+"-"+e}incAttr(t){const e=this._evCount;t in e?e[t]++:e[t]=0,this.attr("data-"+t,this.to$(e[t]))}attributeChangedCallback(t,s,n){switch(t){case e:this._disabled=null!==n}}de(t,e,s){const n=t+(s?"":"-changed"),i=new CustomEvent(n,{detail:e,bubbles:!0,composed:!1});return this.dispatchEvent(i),this.incAttr(n),i}_upgradeProperties(t){t.forEach(t=>{if(this.hasOwnProperty(t)){let e=this[t];delete this[t],this[t]=e}})}}}(HTMLElement))){static get is(){return"css-observe"}static get observedAttributes(){return super.observedAttributes.concat([n,s])}connectedCallback(){this._upgradeProperties([s,n]),this._connected=!0,this.onPropsChange()}get selector(){return this._selector}set selector(t){this.attr(s,t)}get observe(){return this._observe}set observe(t){this.attr(n,t,"")}attributeChangedCallback(t,e,i){super.attributeChangedCallback(t,e,i);const r="_"+t;switch(t){case s:this[r]=i;break;case n:this[r]=null!==i}this.onPropsChange()}onPropsChange(){this._connected&&!this.id&&console.warn("id required for "+this.localName),!this._disabled&&this._connected&&this._observe&&this.id&&this.addCSSListener(this.id,this._selector,this.insertListener)}get latestMatch(){return this._latestMatch}set latestMatch(t){this._latestMatch=t,this.de("latest-match",{value:t})}insertListener(t){if(t.animationName===this.id){const e=t.target;setTimeout(()=>{this.latestMatch=e},0)}}})}();